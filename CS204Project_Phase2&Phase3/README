================================================
Functional Simulator for RISCV Processor
================================================

README

Table of contents
1. Directory Structure
2. How to build
3. How to execute


Directory Structure:
--------------------
CS204-Project
  |
  |- bin
      |
      |- output.out
  |- doc
      |
      |- design-doc.docx
  |- include
      |
      |- builtin_funcs.hpp
      |- control_unit.hpp
      |- global_variables.hpp
      |- myRISCVSim.hpp
      |- registerfile.hpp
      |- self_defined_funcs.hpp
  |- src
      |- alu_unit.cpp
      |- builtin_funcs.hpp
      |- control_unit.cpp
      |- control_unit.hpp
      |- dec2bin.cpp
      |- display.cpp
      |- global_variables.cpp
      |- global_variables.hpp
      |- immediate.cpp
      |- main.cpp
      |- memory_read_write_funcs.cpp
      |- mycode.mc
      |- myRISCVSim.cpp
      |- myRISCVSim.hpp
      |- output.exe
      |- registerfile.cpp
      |- registerfile.hpp
      |- self_defined_funcs.hpp
  |- test
      |- simple_add.mc
      |- fibonnacci.mc
      |- bubble_sort.mc
  |- Project-statement.txt
      
How to build
------------
For building:
first navigate to src folder

We have to give the following command in terminal to run our code: 
"g++ main.cpp alu_unit.cpp control_unit.cpp dec2bin.cpp global_variables.cpp immediate.cpp memory_read_write_funcs.cpp myRISCVSim.cpp registerfile.cpp -o output.exe" {output.out for linux}

How to execute
--------------
 Then we should give the following command after the above command:
 ./output.out <filename.mc>
 where in brackets we have to write name of the file  alongwith relative address example (../test/bubble_sort.mc) which contain our assembly code

 To exit the RISCV simulator we have used opcode="1111111" make sure to add this line at end of code to mark end of program
Description:
 The project's sorce code contains a number of c++ and header files. Each file having it's different function to do.In phase 1 the RISCV simulator will take one instruction at a time as it contains no pipelining.
 The RISCV simulator have 5 main stages:
 1. Fetch: It's main function is to take next instruction and update PC.
 2. Decode: It will decode the fetched instruction and assign different values to source register, destination registor , func3 , func7, immediate,etc.
 3. Execute: It will do the main work of comparing and calculations as it contain the arithematic and logical unit and passes the information to memory.
 4. Memory: It function is to read and write from memory.
 5. Write back: It will make the necessary changes in the register file, PC and call for next instruction as PC will be updated after this step.
 also to maintain clock_cycle count.
 Team members:

 Aditya Yadav : 2022MEB1291

 Dhruv Agarwal : 2022MEB1307

 Satyam Kumar : 2022MCB1279



